<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dr4k0nia.github.io/</id><title>dr4k0nia</title><subtitle>.NET reverse-engineering and development focussing on obfuscation/deobfuscation</subtitle> <updated>2025-03-03T21:32:25+00:00</updated> <author> <name>dr4k0nia</name> <uri>https://dr4k0nia.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dr4k0nia.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dr4k0nia.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 dr4k0nia </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>NixImports a .NET loader using HInvoke</title><link href="https://dr4k0nia.github.io/posts/NixImports-a-NET-loader-using-HInvoke/" rel="alternate" type="text/html" title="NixImports a .NET loader using HInvoke" /><published>2023-05-22T13:27:24+00:00</published> <updated>2023-05-22T20:09:15+00:00</updated> <id>https://dr4k0nia.github.io/posts/NixImports-a-NET-loader-using-HInvoke/</id> <content src="https://dr4k0nia.github.io/posts/NixImports-a-NET-loader-using-HInvoke/" /> <author> <name>dr4k0nia</name> </author> <category term="dotnet" /> <category term="malware" /> <category term="redteam" /> <summary> A while ago, I released HInvoke, a project showcasing API hashing for managed functions. The initial release was rather basic and lacked desirable features like support for non-static methods. NixImports is an example showing the use of the new HInvoke. The update includes support for non-static methods as well as support for nonunique method names. In this blog post, I will describe the improv... </summary> </entry> <entry><title>Analysing A Sample Of Arechclient2</title><link href="https://dr4k0nia.github.io/posts/Analysing-a-sample-of-ArechClient2/" rel="alternate" type="text/html" title="Analysing A Sample Of Arechclient2" /><published>2023-02-05T00:00:00+00:00</published> <updated>2023-02-05T15:33:44+00:00</updated> <id>https://dr4k0nia.github.io/posts/Analysing-a-sample-of-ArechClient2/</id> <content src="https://dr4k0nia.github.io/posts/Analysing-a-sample-of-ArechClient2/" /> <author> <name>dr4k0nia</name> </author> <summary> In this post, I will be going over my process of analyzing a sample of ArechClient2. Including initial analysis, deobfuscation and unpacking of the loader. Followed by the analysis of the .NET payload revealing its config and C2 information. It began with this tweet by @Gi7w0rm. They mentioned me and a few others asking for help analyzing this sample. I decided to look into the sample. After p... </summary> </entry> <entry><title>Unpacking RedLine Stealer</title><link href="https://dr4k0nia.github.io/posts/Unpacking-RedLine-Stealer/" rel="alternate" type="text/html" title="Unpacking RedLine Stealer" /><published>2023-01-04T13:27:24+00:00</published> <updated>2023-01-04T13:27:24+00:00</updated> <id>https://dr4k0nia.github.io/posts/Unpacking-RedLine-Stealer/</id> <content src="https://dr4k0nia.github.io/posts/Unpacking-RedLine-Stealer/" /> <author> <name>dr4k0nia</name> </author> <category term="dotnet" /> <category term="reverse-engineering" /> <category term="malware" /> <summary> In this post, we are going to take a look at Redline Stealer, a well-known .NET based credential stealer. I will focus on unpacking the managed payload and extracting it’s config, for a more detailed analysis of the payload you can check out this post by c3rb3ru5d3d53c. Dealing with the native dropper Many of the in-the-wild samples of Redline are plain .NET applications with pretty basic cus... </summary> </entry> <entry><title>String Obfuscation The Malware Way</title><link href="https://dr4k0nia.github.io/posts/String-Obfuscation-The-Malware-Way/" rel="alternate" type="text/html" title="String Obfuscation The Malware Way" /><published>2022-12-15T19:27:24+00:00</published> <updated>2022-12-15T21:30:56+00:00</updated> <id>https://dr4k0nia.github.io/posts/String-Obfuscation-The-Malware-Way/</id> <content src="https://dr4k0nia.github.io/posts/String-Obfuscation-The-Malware-Way/" /> <author> <name>dr4k0nia</name> </author> <category term="dotnet" /> <category term="coding" /> <category term="malware" /> <summary> Malware authors like to use string obfuscation to make their code harder to analyze and detect. One obfuscation technique is to insert special characters into a string, and then use some code to remove those special characters at runtime. This technique is simple but effective, as it can hide the actual string from being easily identified. I recently came across an example of this technique on... </summary> </entry> <entry><title>Encrypting strings in .NET</title><link href="https://dr4k0nia.github.io/posts/Encrypting-Strings-In-NET/" rel="alternate" type="text/html" title="Encrypting strings in .NET" /><published>2022-10-15T19:27:24+00:00</published> <updated>2022-10-15T19:27:24+00:00</updated> <id>https://dr4k0nia.github.io/posts/Encrypting-Strings-In-NET/</id> <content src="https://dr4k0nia.github.io/posts/Encrypting-Strings-In-NET/" /> <author> <name>dr4k0nia</name> </author> <category term="dotnet" /> <category term="coding" /> <summary> Implementing custom string encryption for .NET binaries utilizing an XOR-based cipher and AsmResolver. Encrypting strings is a common practice to slow down static analysis or evade automatic analysis, in this blog post I will explain how I build my own binary-level string obfuscator in C# .NET 6. The full code of the project can be found here. Concept and Structure To begin with, I will expla... </summary> </entry> </feed>
